{
  "name": "WhatsApp Resume Processing",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-node",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "whatsapp-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.NumMedia }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-node",
      "name": "Has Media?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.MediaUrl0 }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "download-node",
      "name": "Download Resume",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract basic information from WhatsApp message\nconst text = $json.Body || \"\";\nconst sender = $json.From || \"\";\nconst now = new Date().toISOString();\n\n// Email regex\nconst emailMatch = text.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,}/i);\nconst phoneMatch = text.match(/(\\+?\\d{1,3}[\\s-]?)?(\\d{10,12})/g);\n\n// Try to guess name: look for \"Name: \" or first line with words\nlet name = \"\";\nconst nameTag = text.match(/name[:\\-\\s]+([A-Za-z\\s]{2,40})/i);\nif (nameTag && nameTag[1]) {\n  name = nameTag[1].trim();\n} else {\n  const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(l => l);\n  if (lines.length) {\n    // take first line if looks like a name (two words with capital first letters)\n    if (/^[A-Z][a-z]{1,}\\s[A-Z][a-z]{1,}/.test(lines[0])) {\n      name = lines[0];\n    }\n  }\n}\n\n// Basic skills extraction (can be enhanced with Gemini)\nlet skills = \"\";\nconst skillKeywords = ['javascript', 'python', 'react', 'node.js', 'sql', 'aws', 'docker', 'git'];\nconst foundSkills = skillKeywords.filter(skill => \n  text.toLowerCase().includes(skill.toLowerCase())\n);\nif (foundSkills.length > 0) {\n  skills = foundSkills.join(', ');\n}\n\nreturn [{\n  json: {\n    received_on: now,\n    sender: sender,\n    raw_text: text,\n    name: name || \"\",\n    email: emailMatch ? emailMatch[0] : \"\",\n    phone: phoneMatch ? phoneMatch[0] : \"\",\n    skills: skills,\n    experience: \"\" // Will be filled by Gemini if available\n  }\n}];"
      },
      "id": "extract-node",
      "name": "Extract Basic Info",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "contents",
              "value": "[{\"parts\":[{\"text\":\"Extract the candidate's Skills and Experience (years + short summary) from the following resume text. Return JSON only with keys 'skills' and 'experience'.\\n\\nResume text:\\n{{ $json.raw_text }}\"}]}]"
            },
            {
              "name": "generationConfig",
              "value": "{\"temperature\": 0.3, \"maxOutputTokens\": 1000}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "gemini-node",
      "name": "Gemini Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "credentials": {
        "httpHeaderAuth": "gemini-credentials"
      }
    },
    {
      "parameters": {
        "operation": "upload",
        "binaryPropertyName": "data",
        "options": {
          "folderId": "={{ $vars.GOOGLE_DRIVE_FOLDER_ID }}"
        }
      },
      "id": "drive-node",
      "name": "Upload to Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1340, 200],
      "credentials": {
        "googleApi": "google-credentials"
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": "={{ $vars.GOOGLE_SHEET_ID }}",
        "sheetName": "Sheet1",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Received_On": "={{ $json.received_on }}",
            "Sender": "={{ $json.sender }}",
            "Name": "={{ $json.name }}",
            "Email": "={{ $json.email }}",
            "Phone": "={{ $json.phone }}",
            "Skills": "={{ $json.skills }}",
            "Experience": "={{ $json.experience }}",
            "Resume_Link": "={{ $json.driveFile.webViewLink || '' }}"
          }
        }
      },
      "id": "sheets-node",
      "name": "Log to Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1560, 300],
      "credentials": {
        "googleApi": "google-credentials"
      }
    },
    {
      "parameters": {
        "url": "https://api.twilio.com/2010-04-01/Accounts/{{ $vars.TWILIO_ACCOUNT_SID }}/Messages.json",
        "authentication": "basicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "From",
              "value": "{{ $vars.TWILIO_WHATSAPP_NUMBER }}"
            },
            {
              "name": "To",
              "value": "={{ $json.sender }}"
            },
            {
              "name": "Body",
              "value": "Thank you {{ $json.name || 'for your message' }}! Your resume has been received and logged successfully. We'll review it and get back to you soon."
            }
          ]
        }
      },
      "id": "reply-node",
      "name": "Send Auto-Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 300],
      "credentials": {
        "httpBasicAuth": "twilio-credentials"
      }
    }
  ],
  "connections": {
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Has Media?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Media?": {
      "main": [
        [
          {
            "node": "Download Resume",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Basic Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Resume": {
      "main": [
        [
          {
            "node": "Extract Basic Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Basic Info": {
      "main": [
        [
          {
            "node": "Gemini Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Analysis": {
      "main": [
        [
          {
            "node": "Upload to Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Drive": {
      "main": [
        [
          {
            "node": "Log to Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Sheets": {
      "main": [
        [
          {
            "node": "Send Auto-Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
